// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userIdentityFieldNames          = builder.RawFieldNames(&UserIdentity{})
	userIdentityRows                = strings.Join(userIdentityFieldNames, ",")
	userIdentityRowsExpectAutoSet   = strings.Join(stringx.Remove(userIdentityFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userIdentityRowsWithPlaceHolder = strings.Join(stringx.Remove(userIdentityFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userIdentityModel interface {
		Insert(ctx context.Context, data *UserIdentity) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserIdentity, error)
		Update(ctx context.Context, data *UserIdentity) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserIdentityModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserIdentity struct {
		Id           int64     `db:"id"`
		UserUuid     string    `db:"user_uuid"`
		IdentityType int64     `db:"identity_type"`
		Identifier   string    `db:"identifier"`
		Credential   string    `db:"credential"`
		CreatedAt    time.Time `db:"created_at"`
		UpdatedAt    time.Time `db:"updated_at"`
	}
)

func newUserIdentityModel(conn sqlx.SqlConn) *defaultUserIdentityModel {
	return &defaultUserIdentityModel{
		conn:  conn,
		table: "`user_identity`",
	}
}

func (m *defaultUserIdentityModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserIdentityModel) FindOne(ctx context.Context, id int64) (*UserIdentity, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userIdentityRows, m.table)
	var resp UserIdentity
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserIdentityModel) Insert(ctx context.Context, data *UserIdentity) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userIdentityRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserUuid, data.IdentityType, data.Identifier, data.Credential)
	return ret, err
}

func (m *defaultUserIdentityModel) Update(ctx context.Context, data *UserIdentity) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userIdentityRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserUuid, data.IdentityType, data.Identifier, data.Credential, data.Id)
	return err
}

func (m *defaultUserIdentityModel) tableName() string {
	return m.table
}
