// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userBaseFieldNames          = builder.RawFieldNames(&UserBase{})
	userBaseRows                = strings.Join(userBaseFieldNames, ",")
	userBaseRowsExpectAutoSet   = strings.Join(stringx.Remove(userBaseFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userBaseRowsWithPlaceHolder = strings.Join(stringx.Remove(userBaseFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userBaseModel interface {
		Insert(ctx context.Context, data *UserBase) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserBase, error)
		Update(ctx context.Context, data *UserBase) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserBaseModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserBase struct {
		Id        int64     `db:"id"`
		Uuid      string    `db:"uuid"`
		Name      string    `db:"name"`
		Avatar    string    `db:"avatar"`
		Password  string    `db:"password"`
		Status    int64     `db:"status"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newUserBaseModel(conn sqlx.SqlConn) *defaultUserBaseModel {
	return &defaultUserBaseModel{
		conn:  conn,
		table: "`user_base`",
	}
}

func (m *defaultUserBaseModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserBaseModel) FindOne(ctx context.Context, id int64) (*UserBase, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userBaseRows, m.table)
	var resp UserBase
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserBaseModel) Insert(ctx context.Context, data *UserBase) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userBaseRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uuid, data.Name, data.Avatar, data.Password, data.Status)
	return ret, err
}

func (m *defaultUserBaseModel) Update(ctx context.Context, data *UserBase) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userBaseRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uuid, data.Name, data.Avatar, data.Password, data.Status, data.Id)
	return err
}

func (m *defaultUserBaseModel) tableName() string {
	return m.table
}
