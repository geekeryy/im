// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	messagesFieldNames          = builder.RawFieldNames(&Messages{})
	messagesRows                = strings.Join(messagesFieldNames, ",")
	messagesRowsExpectAutoSet   = strings.Join(stringx.Remove(messagesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	messagesRowsWithPlaceHolder = strings.Join(stringx.Remove(messagesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	messagesModel interface {
		Insert(ctx context.Context, data *Messages) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Messages, error)
		Update(ctx context.Context, data *Messages) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMessagesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Messages struct {
		Id          int64     `db:"id"`
		Uuid        string    `db:"uuid"`
		SessionUuid string    `db:"session_uuid"`
		SenderUuid  string    `db:"sender_uuid"`
		SeqId       int64     `db:"seq_id"`
		MessageType string    `db:"message_type"`
		Status      int64     `db:"status"`
		Content     string    `db:"content"`
		CreatedAt   time.Time `db:"created_at"`
		UpdatedAt   time.Time `db:"updated_at"`
	}
)

func newMessagesModel(conn sqlx.SqlConn) *defaultMessagesModel {
	return &defaultMessagesModel{
		conn:  conn,
		table: "`messages`",
	}
}

func (m *defaultMessagesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMessagesModel) FindOne(ctx context.Context, id int64) (*Messages, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", messagesRows, m.table)
	var resp Messages
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMessagesModel) Insert(ctx context.Context, data *Messages) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, messagesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uuid, data.SessionUuid, data.SenderUuid, data.SeqId, data.MessageType, data.Status, data.Content)
	return ret, err
}

func (m *defaultMessagesModel) Update(ctx context.Context, data *Messages) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, messagesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uuid, data.SessionUuid, data.SenderUuid, data.SeqId, data.MessageType, data.Status, data.Content, data.Id)
	return err
}

func (m *defaultMessagesModel) tableName() string {
	return m.table
}
