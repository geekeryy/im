// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: rpc/service/imgateway.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IMGateway_DelConn_FullMethodName = "/imgateway.IMGateway/DelConn"
)

// IMGatewayClient is the client API for IMGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IMGatewayClient interface {
	DelConn(ctx context.Context, in *DelConnRequest, opts ...grpc.CallOption) (*DelConnResponse, error)
}

type iMGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewIMGatewayClient(cc grpc.ClientConnInterface) IMGatewayClient {
	return &iMGatewayClient{cc}
}

func (c *iMGatewayClient) DelConn(ctx context.Context, in *DelConnRequest, opts ...grpc.CallOption) (*DelConnResponse, error) {
	out := new(DelConnResponse)
	err := c.cc.Invoke(ctx, IMGateway_DelConn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IMGatewayServer is the server API for IMGateway service.
// All implementations must embed UnimplementedIMGatewayServer
// for forward compatibility
type IMGatewayServer interface {
	DelConn(context.Context, *DelConnRequest) (*DelConnResponse, error)
	mustEmbedUnimplementedIMGatewayServer()
}

// UnimplementedIMGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedIMGatewayServer struct {
}

func (UnimplementedIMGatewayServer) DelConn(context.Context, *DelConnRequest) (*DelConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelConn not implemented")
}
func (UnimplementedIMGatewayServer) mustEmbedUnimplementedIMGatewayServer() {}

// UnsafeIMGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IMGatewayServer will
// result in compilation errors.
type UnsafeIMGatewayServer interface {
	mustEmbedUnimplementedIMGatewayServer()
}

func RegisterIMGatewayServer(s grpc.ServiceRegistrar, srv IMGatewayServer) {
	s.RegisterService(&IMGateway_ServiceDesc, srv)
}

func _IMGateway_DelConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMGatewayServer).DelConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IMGateway_DelConn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMGatewayServer).DelConn(ctx, req.(*DelConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IMGateway_ServiceDesc is the grpc.ServiceDesc for IMGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IMGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imgateway.IMGateway",
	HandlerType: (*IMGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelConn",
			Handler:    _IMGateway_DelConn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/service/imgateway.proto",
}
