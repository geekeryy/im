// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: rpc/service/apigateway.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	APIGateway_SessionList_FullMethodName    = "/apigateway.APIGateway/SessionList"
	APIGateway_HistoryMessage_FullMethodName = "/apigateway.APIGateway/HistoryMessage"
)

// APIGatewayClient is the client API for APIGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIGatewayClient interface {
	SessionList(ctx context.Context, in *SessionListRequest, opts ...grpc.CallOption) (*SessionListResponse, error)
	HistoryMessage(ctx context.Context, in *HistoryMessageRequest, opts ...grpc.CallOption) (*HistoryMessageResponse, error)
}

type aPIGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIGatewayClient(cc grpc.ClientConnInterface) APIGatewayClient {
	return &aPIGatewayClient{cc}
}

func (c *aPIGatewayClient) SessionList(ctx context.Context, in *SessionListRequest, opts ...grpc.CallOption) (*SessionListResponse, error) {
	out := new(SessionListResponse)
	err := c.cc.Invoke(ctx, APIGateway_SessionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIGatewayClient) HistoryMessage(ctx context.Context, in *HistoryMessageRequest, opts ...grpc.CallOption) (*HistoryMessageResponse, error) {
	out := new(HistoryMessageResponse)
	err := c.cc.Invoke(ctx, APIGateway_HistoryMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIGatewayServer is the server API for APIGateway service.
// All implementations must embed UnimplementedAPIGatewayServer
// for forward compatibility
type APIGatewayServer interface {
	SessionList(context.Context, *SessionListRequest) (*SessionListResponse, error)
	HistoryMessage(context.Context, *HistoryMessageRequest) (*HistoryMessageResponse, error)
	mustEmbedUnimplementedAPIGatewayServer()
}

// UnimplementedAPIGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedAPIGatewayServer struct {
}

func (UnimplementedAPIGatewayServer) SessionList(context.Context, *SessionListRequest) (*SessionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionList not implemented")
}
func (UnimplementedAPIGatewayServer) HistoryMessage(context.Context, *HistoryMessageRequest) (*HistoryMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryMessage not implemented")
}
func (UnimplementedAPIGatewayServer) mustEmbedUnimplementedAPIGatewayServer() {}

// UnsafeAPIGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIGatewayServer will
// result in compilation errors.
type UnsafeAPIGatewayServer interface {
	mustEmbedUnimplementedAPIGatewayServer()
}

func RegisterAPIGatewayServer(s grpc.ServiceRegistrar, srv APIGatewayServer) {
	s.RegisterService(&APIGateway_ServiceDesc, srv)
}

func _APIGateway_SessionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServer).SessionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGateway_SessionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServer).SessionList(ctx, req.(*SessionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APIGateway_HistoryMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIGatewayServer).HistoryMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APIGateway_HistoryMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIGatewayServer).HistoryMessage(ctx, req.(*HistoryMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APIGateway_ServiceDesc is the grpc.ServiceDesc for APIGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apigateway.APIGateway",
	HandlerType: (*APIGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionList",
			Handler:    _APIGateway_SessionList_Handler,
		},
		{
			MethodName: "HistoryMessage",
			Handler:    _APIGateway_HistoryMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/service/apigateway.proto",
}
